use std::fs::*;
use std::io;

fn main() -> io::Result<()> {
    let mut childs = Vec::new();
    for dir_res in read_dir("mods")?.into_iter() {
        let entry = dir_res?;
        let dir = entry.path();
        println!("{:?}", dir);
        if !dir.is_dir() {
            continue;
        }
        let assembly = dir.join("assembly").canonicalize()?;
        println!("cargo:rerun-if-changed={}", assembly.display());
        let child = std::process::Command::new("npm")
            .args(&["run", "asbuild"])
            .current_dir(dir.canonicalize()?)
            .spawn()?;
        childs.push((dir, child));
    }

    println!("Finished command spanwing");

    for (dir, child) in childs {
        let output = child.wait_with_output()?;
        if !output.status.success() {
            let stderr = String::from_utf8(output.stderr)
                .expect("Expected stderr of child process to be utf8");
            println!("{:?}:\n{:?}", dir, stderr);
        }
    }

    Ok(())
}